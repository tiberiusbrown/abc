u8 [4] a1;
u16[4] a2;
u24[4] a3;
u32[4] a4;

u32[4] m;

void main()
{
    $debug_break();
    
    $assert(a1[2] == 0);
    $assert(a2[2] == 0);
    $assert(a3[2] == 0);
    $assert(a4[2] == 0);
    
    m[0] = 0x00000000;
    m[1] = 0xffffffff;
    m[2] = 0xcafebabe;
    m[3] = 0x12345678;
    
    for(u8 i = 0; i < 4; i = i + 1)
    {
        a1[i] = m[i];
        a2[i] = m[i];
        a3[i] = m[i];
        a4[i] = m[i];
    }

    for(u8 i = 1; i < 4; i = i + 1)
    {
        $assert((a1[0] & a1[i]) == 0);
        $assert((a1[0] & a2[i]) == 0);
        $assert((a1[0] & a3[i]) == 0);
        $assert((a1[0] & a4[i]) == 0);
        $assert((a2[0] & a2[i]) == 0);
        $assert((a2[0] & a3[i]) == 0);
        $assert((a2[0] & a4[i]) == 0);
        $assert((a3[0] & a3[i]) == 0);
        $assert((a3[0] & a4[i]) == 0);
        $assert((a4[0] & a4[i]) == 0);
        
        $assert((a1[0] | a1[i]) == a1[i]);
        $assert((a1[0] | a2[i]) == a2[i]);
        $assert((a1[0] | a3[i]) == a3[i]);
        $assert((a1[0] | a4[i]) == a4[i]);
        $assert((a2[0] | a2[i]) == a2[i]);
        $assert((a2[0] | a3[i]) == a3[i]);
        $assert((a2[0] | a4[i]) == a4[i]);
        $assert((a3[0] | a3[i]) == a3[i]);
        $assert((a3[0] | a4[i]) == a4[i]);
        $assert((a4[0] | a4[i]) == a4[i]);
    }
    
    for(u8 i = 2; i < 4; i = i + 1)
    {
        $assert((a1[1] & a1[i]) == a1[i]);
        $assert((a2[1] & a2[i]) == a2[i]);
        $assert((a3[1] & a3[i]) == a3[i]);
        $assert((a4[1] & a4[i]) == a4[i]);
        
        $assert((a1[1] & a2[i]) == u8(a2[i]));
        $assert((a1[1] & a3[i]) == u8(a3[i]));
        $assert((a1[1] & a4[i]) == u8(a4[i]));
        $assert((a2[1] & a3[i]) == u16(a3[i]));
        $assert((a2[1] & a4[i]) == u16(a4[i]));
        $assert((a3[1] & a4[i]) == u24(a4[i]));
        
        $assert((a1[1] | a1[i]) == 0xff);
        $assert((a2[1] | a2[i]) == 0xffff);
        $assert((a3[1] | a3[i]) == 0xffffff);
        $assert((a4[1] | a4[i]) == 0xffffffff);
    }
    
    a1[0] = 1;
    $assert(a1[0] << 0 == 1u << 0);
    $assert(a1[0] << 1 == 1u << 1);
    $assert(a1[0] << 2 == 1u << 2);
    $assert(a1[0] << 3 == 1u << 3);
    $assert(a1[0] << 4 == 1u << 4);
    $assert(a1[0] << 5 == 1u << 5);
    $assert(a1[0] << 6 == 1u << 6);
    $assert(a1[0] << 7 == 1u << 7);
    $assert(a1[0] << 8 == 0);
    
    a2[0] = 1;
    $assert(a2[0] <<  0 == 1u <<  0);
    $assert(a2[0] <<  1 == 1u <<  1);
    $assert(a2[0] <<  2 == 1u <<  2);
    $assert(a2[0] <<  3 == 1u <<  3);
    $assert(a2[0] <<  4 == 1u <<  4);
    $assert(a2[0] <<  5 == 1u <<  5);
    $assert(a2[0] <<  6 == 1u <<  6);
    $assert(a2[0] <<  7 == 1u <<  7);
    $assert(a2[0] <<  8 == 1u <<  8);
    $assert(a2[0] <<  9 == 1u <<  9);
    $assert(a2[0] << 10 == 1u << 10);
    $assert(a2[0] << 11 == 1u << 11);
    $assert(a2[0] << 12 == 1u << 12);
    $assert(a2[0] << 13 == 1u << 13);
    $assert(a2[0] << 14 == 1u << 14);
    $assert(a2[0] << 15 == 1u << 15);
    $assert(a2[0] << 16 == 0);
    
    a3[0] = 1;
    $assert(a3[0] <<  0 == 1u <<  0);
    $assert(a3[0] <<  1 == 1u <<  1);
    $assert(a3[0] <<  2 == 1u <<  2);
    $assert(a3[0] <<  3 == 1u <<  3);
    $assert(a3[0] <<  4 == 1u <<  4);
    $assert(a3[0] <<  5 == 1u <<  5);
    $assert(a3[0] <<  6 == 1u <<  6);
    $assert(a3[0] <<  7 == 1u <<  7);
    $assert(a3[0] <<  8 == 1u <<  8);
    $assert(a3[0] <<  9 == 1u <<  9);
    $assert(a3[0] << 10 == 1u << 10);
    $assert(a3[0] << 11 == 1u << 11);
    $assert(a3[0] << 12 == 1u << 12);
    $assert(a3[0] << 13 == 1u << 13);
    $assert(a3[0] << 14 == 1u << 14);
    $assert(a3[0] << 15 == 1u << 15);
    $assert(a3[0] << 16 == 1u << 16);
    $assert(a3[0] << 17 == 1u << 17);
    $assert(a3[0] << 18 == 1u << 18);
    $assert(a3[0] << 19 == 1u << 19);
    $assert(a3[0] << 20 == 1u << 20);
    $assert(a3[0] << 21 == 1u << 21);
    $assert(a3[0] << 22 == 1u << 22);
    $assert(a3[0] << 23 == 1u << 23);
    $assert(a3[0] << 24 == 0);
    
    a4[0] = 1;
    $assert(a4[0] <<  0 == 1u <<  0);
    $assert(a4[0] <<  1 == 1u <<  1);
    $assert(a4[0] <<  2 == 1u <<  2);
    $assert(a4[0] <<  3 == 1u <<  3);
    $assert(a4[0] <<  4 == 1u <<  4);
    $assert(a4[0] <<  5 == 1u <<  5);
    $assert(a4[0] <<  6 == 1u <<  6);
    $assert(a4[0] <<  7 == 1u <<  7);
    $assert(a4[0] <<  8 == 1u <<  8);
    $assert(a4[0] <<  9 == 1u <<  9);
    $assert(a4[0] << 10 == 1u << 10);
    $assert(a4[0] << 11 == 1u << 11);
    $assert(a4[0] << 12 == 1u << 12);
    $assert(a4[0] << 13 == 1u << 13);
    $assert(a4[0] << 14 == 1u << 14);
    $assert(a4[0] << 15 == 1u << 15);
    $assert(a4[0] << 16 == 1u << 16);
    $assert(a4[0] << 17 == 1u << 17);
    $assert(a4[0] << 18 == 1u << 18);
    $assert(a4[0] << 19 == 1u << 19);
    $assert(a4[0] << 20 == 1u << 20);
    $assert(a4[0] << 21 == 1u << 21);
    $assert(a4[0] << 22 == 1u << 22);
    $assert(a4[0] << 23 == 1u << 23);
    $assert(a4[0] << 24 == 1u << 24);
    $assert(a4[0] << 25 == 1u << 25);
    $assert(a4[0] << 26 == 1u << 26);
    $assert(a4[0] << 27 == 1u << 27);
    $assert(a4[0] << 28 == 1u << 28);
    $assert(a4[0] << 29 == 1u << 29);
    $assert(a4[0] << 30 == 1u << 30);
    $assert(a4[0] << 31 == 1u << 31);
    $assert(a4[0] << 32 == 0);
    
    a1[0] = 0x80;
    $assert(a1[0] >> 0 == 0x80u >> 0);
    $assert(a1[0] >> 1 == 0x80u >> 1);
    $assert(a1[0] >> 2 == 0x80u >> 2);
    $assert(a1[0] >> 3 == 0x80u >> 3);
    $assert(a1[0] >> 4 == 0x80u >> 4);
    $assert(a1[0] >> 5 == 0x80u >> 5);
    $assert(a1[0] >> 6 == 0x80u >> 6);
    $assert(a1[0] >> 7 == 0x80u >> 7);
    $assert(a1[0] >> 8 == 0);
    
    a2[0] = 0x8000;
    $assert(a2[0] >>  0 == 0x8000u >>  0);
    $assert(a2[0] >>  1 == 0x8000u >>  1);
    $assert(a2[0] >>  2 == 0x8000u >>  2);
    $assert(a2[0] >>  3 == 0x8000u >>  3);
    $assert(a2[0] >>  4 == 0x8000u >>  4);
    $assert(a2[0] >>  5 == 0x8000u >>  5);
    $assert(a2[0] >>  6 == 0x8000u >>  6);
    $assert(a2[0] >>  7 == 0x8000u >>  7);
    $assert(a2[0] >>  8 == 0x8000u >>  8);
    $assert(a2[0] >>  9 == 0x8000u >>  9);
    $assert(a2[0] >> 10 == 0x8000u >> 10);
    $assert(a2[0] >> 11 == 0x8000u >> 11);
    $assert(a2[0] >> 12 == 0x8000u >> 12);
    $assert(a2[0] >> 13 == 0x8000u >> 13);
    $assert(a2[0] >> 14 == 0x8000u >> 14);
    $assert(a2[0] >> 15 == 0x8000u >> 15);
    $assert(a2[0] >> 16 == 0);
    
    a3[0] = 0x800000;
    $assert(a3[0] >>  0 == 0x800000u >>  0);
    $assert(a3[0] >>  1 == 0x800000u >>  1);
    $assert(a3[0] >>  2 == 0x800000u >>  2);
    $assert(a3[0] >>  3 == 0x800000u >>  3);
    $assert(a3[0] >>  4 == 0x800000u >>  4);
    $assert(a3[0] >>  5 == 0x800000u >>  5);
    $assert(a3[0] >>  6 == 0x800000u >>  6);
    $assert(a3[0] >>  7 == 0x800000u >>  7);
    $assert(a3[0] >>  8 == 0x800000u >>  8);
    $assert(a3[0] >>  9 == 0x800000u >>  9);
    $assert(a3[0] >> 10 == 0x800000u >> 10);
    $assert(a3[0] >> 11 == 0x800000u >> 11);
    $assert(a3[0] >> 12 == 0x800000u >> 12);
    $assert(a3[0] >> 13 == 0x800000u >> 13);
    $assert(a3[0] >> 14 == 0x800000u >> 14);
    $assert(a3[0] >> 15 == 0x800000u >> 15);
    $assert(a3[0] >> 16 == 0x800000u >> 16);
    $assert(a3[0] >> 17 == 0x800000u >> 17);
    $assert(a3[0] >> 18 == 0x800000u >> 18);
    $assert(a3[0] >> 19 == 0x800000u >> 19);
    $assert(a3[0] >> 20 == 0x800000u >> 20);
    $assert(a3[0] >> 21 == 0x800000u >> 21);
    $assert(a3[0] >> 22 == 0x800000u >> 22);
    $assert(a3[0] >> 23 == 0x800000u >> 23);
    $assert(a3[0] >> 24 == 0);
    
    a4[0] = 0x80000000;
    $assert(a4[0] >>  0 == 0x80000000u >>  0);
    $assert(a4[0] >>  1 == 0x80000000u >>  1);
    $assert(a4[0] >>  2 == 0x80000000u >>  2);
    $assert(a4[0] >>  3 == 0x80000000u >>  3);
    $assert(a4[0] >>  4 == 0x80000000u >>  4);
    $assert(a4[0] >>  5 == 0x80000000u >>  5);
    $assert(a4[0] >>  6 == 0x80000000u >>  6);
    $assert(a4[0] >>  7 == 0x80000000u >>  7);
    $assert(a4[0] >>  8 == 0x80000000u >>  8);
    $assert(a4[0] >>  9 == 0x80000000u >>  9);
    $assert(a4[0] >> 10 == 0x80000000u >> 10);
    $assert(a4[0] >> 11 == 0x80000000u >> 11);
    $assert(a4[0] >> 12 == 0x80000000u >> 12);
    $assert(a4[0] >> 13 == 0x80000000u >> 13);
    $assert(a4[0] >> 14 == 0x80000000u >> 14);
    $assert(a4[0] >> 15 == 0x80000000u >> 15);
    $assert(a4[0] >> 16 == 0x80000000u >> 16);
    $assert(a4[0] >> 17 == 0x80000000u >> 17);
    $assert(a4[0] >> 18 == 0x80000000u >> 18);
    $assert(a4[0] >> 19 == 0x80000000u >> 19);
    $assert(a4[0] >> 20 == 0x80000000u >> 20);
    $assert(a4[0] >> 21 == 0x80000000u >> 21);
    $assert(a4[0] >> 22 == 0x80000000u >> 22);
    $assert(a4[0] >> 23 == 0x80000000u >> 23);
    $assert(a4[0] >> 24 == 0x80000000u >> 24);
    $assert(a4[0] >> 25 == 0x80000000u >> 25);
    $assert(a4[0] >> 26 == 0x80000000u >> 26);
    $assert(a4[0] >> 27 == 0x80000000u >> 27);
    $assert(a4[0] >> 28 == 0x80000000u >> 28);
    $assert(a4[0] >> 29 == 0x80000000u >> 29);
    $assert(a4[0] >> 30 == 0x80000000u >> 30);
    $assert(a4[0] >> 31 == 0x80000000u >> 31);
    $assert(a4[0] >> 32 == 0);
    
    i8 s1 = 0x80;
    $assert(s1 >> 0 == i8(0x80) >> 0);
    $assert(s1 >> 1 == i8(0x80) >> 1);
    $assert(s1 >> 2 == i8(0x80) >> 2);
    $assert(s1 >> 3 == i8(0x80) >> 3);
    $assert(s1 >> 4 == i8(0x80) >> 4);
    $assert(s1 >> 5 == i8(0x80) >> 5);
    $assert(s1 >> 6 == i8(0x80) >> 6);
    $assert(s1 >> 7 == i8(0x80) >> 7);
    $assert(s1 >> 8 == -1);
    
    i16 s2 = 0x8000;
    $assert(s2 >>  0 == i16(0x8000) >>  0);
    $assert(s2 >>  1 == i16(0x8000) >>  1);
    $assert(s2 >>  2 == i16(0x8000) >>  2);
    $assert(s2 >>  3 == i16(0x8000) >>  3);
    $assert(s2 >>  4 == i16(0x8000) >>  4);
    $assert(s2 >>  5 == i16(0x8000) >>  5);
    $assert(s2 >>  6 == i16(0x8000) >>  6);
    $assert(s2 >>  7 == i16(0x8000) >>  7);
    $assert(s2 >>  8 == i16(0x8000) >>  8);
    $assert(s2 >>  9 == i16(0x8000) >>  9);
    $assert(s2 >> 10 == i16(0x8000) >> 10);
    $assert(s2 >> 11 == i16(0x8000) >> 11);
    $assert(s2 >> 12 == i16(0x8000) >> 12);
    $assert(s2 >> 13 == i16(0x8000) >> 13);
    $assert(s2 >> 14 == i16(0x8000) >> 14);
    $assert(s2 >> 15 == i16(0x8000) >> 15);
    $assert(s2 >> 16 == -1);
    
    i24 s3 = 0x800000;
    $assert(s3 >>  0 == i24(0x800000) >>  0);
    $assert(s3 >>  1 == i24(0x800000) >>  1);
    $assert(s3 >>  2 == i24(0x800000) >>  2);
    $assert(s3 >>  3 == i24(0x800000) >>  3);
    $assert(s3 >>  4 == i24(0x800000) >>  4);
    $assert(s3 >>  5 == i24(0x800000) >>  5);
    $assert(s3 >>  6 == i24(0x800000) >>  6);
    $assert(s3 >>  7 == i24(0x800000) >>  7);
    $assert(s3 >>  8 == i24(0x800000) >>  8);
    $assert(s3 >>  9 == i24(0x800000) >>  9);
    $assert(s3 >> 10 == i24(0x800000) >> 10);
    $assert(s3 >> 11 == i24(0x800000) >> 11);
    $assert(s3 >> 12 == i24(0x800000) >> 12);
    $assert(s3 >> 13 == i24(0x800000) >> 13);
    $assert(s3 >> 14 == i24(0x800000) >> 14);
    $assert(s3 >> 15 == i24(0x800000) >> 15);
    $assert(s3 >> 16 == i24(0x800000) >> 16);
    $assert(s3 >> 17 == i24(0x800000) >> 17);
    $assert(s3 >> 18 == i24(0x800000) >> 18);
    $assert(s3 >> 19 == i24(0x800000) >> 19);
    $assert(s3 >> 20 == i24(0x800000) >> 20);
    $assert(s3 >> 21 == i24(0x800000) >> 21);
    $assert(s3 >> 22 == i24(0x800000) >> 22);
    $assert(s3 >> 23 == i24(0x800000) >> 23);
    $assert(s3 >> 24 == -1);
    
    u24 s3 = 0x800000;
    $assert(s3 >>  0 == u24(0x800000) >>  0);
    $assert(s3 >>  1 == u24(0x800000) >>  1);
    $assert(s3 >>  2 == u24(0x800000) >>  2);
    $assert(s3 >>  3 == u24(0x800000) >>  3);
    $assert(s3 >>  4 == u24(0x800000) >>  4);
    $assert(s3 >>  5 == u24(0x800000) >>  5);
    $assert(s3 >>  6 == u24(0x800000) >>  6);
    $assert(s3 >>  7 == u24(0x800000) >>  7);
    $assert(s3 >>  8 == u24(0x800000) >>  8);
    $assert(s3 >>  9 == u24(0x800000) >>  9);
    $assert(s3 >> 10 == u24(0x800000) >> 10);
    $assert(s3 >> 11 == u24(0x800000) >> 11);
    $assert(s3 >> 12 == u24(0x800000) >> 12);
    $assert(s3 >> 13 == u24(0x800000) >> 13);
    $assert(s3 >> 14 == u24(0x800000) >> 14);
    $assert(s3 >> 15 == u24(0x800000) >> 15);
    $assert(s3 >> 16 == u24(0x800000) >> 16);
    $assert(s3 >> 17 == u24(0x800000) >> 17);
    $assert(s3 >> 18 == u24(0x800000) >> 18);
    $assert(s3 >> 19 == u24(0x800000) >> 19);
    $assert(s3 >> 20 == u24(0x800000) >> 20);
    $assert(s3 >> 21 == u24(0x800000) >> 21);
    $assert(s3 >> 22 == u24(0x800000) >> 22);
    $assert(s3 >> 23 == u24(0x800000) >> 23);
    $assert(s3 >> 24 == 0);
    
    i32 s4 = 0x80000000;
    $assert(s4 >>  0 == i32(0x80000000) >>  0);
    $assert(s4 >>  1 == i32(0x80000000) >>  1);
    $assert(s4 >>  2 == i32(0x80000000) >>  2);
    $assert(s4 >>  3 == i32(0x80000000) >>  3);
    $assert(s4 >>  4 == i32(0x80000000) >>  4);
    $assert(s4 >>  5 == i32(0x80000000) >>  5);
    $assert(s4 >>  6 == i32(0x80000000) >>  6);
    $assert(s4 >>  7 == i32(0x80000000) >>  7);
    $assert(s4 >>  8 == i32(0x80000000) >>  8);
    $assert(s4 >>  9 == i32(0x80000000) >>  9);
    $assert(s4 >> 10 == i32(0x80000000) >> 10);
    $assert(s4 >> 11 == i32(0x80000000) >> 11);
    $assert(s4 >> 12 == i32(0x80000000) >> 12);
    $assert(s4 >> 13 == i32(0x80000000) >> 13);
    $assert(s4 >> 14 == i32(0x80000000) >> 14);
    $assert(s4 >> 15 == i32(0x80000000) >> 15);
    $assert(s4 >> 16 == i32(0x80000000) >> 16);
    $assert(s4 >> 17 == i32(0x80000000) >> 17);
    $assert(s4 >> 18 == i32(0x80000000) >> 18);
    $assert(s4 >> 19 == i32(0x80000000) >> 19);
    $assert(s4 >> 20 == i32(0x80000000) >> 20);
    $assert(s4 >> 21 == i32(0x80000000) >> 21);
    $assert(s4 >> 22 == i32(0x80000000) >> 22);
    $assert(s4 >> 23 == i32(0x80000000) >> 23);
    $assert(s4 >> 24 == i32(0x80000000) >> 24);
    $assert(s4 >> 25 == i32(0x80000000) >> 25);
    $assert(s4 >> 26 == i32(0x80000000) >> 26);
    $assert(s4 >> 27 == i32(0x80000000) >> 27);
    $assert(s4 >> 28 == i32(0x80000000) >> 28);
    $assert(s4 >> 29 == i32(0x80000000) >> 29);
    $assert(s4 >> 30 == i32(0x80000000) >> 30);
    $assert(s4 >> 31 == i32(0x80000000) >> 31);
    $assert(s4 >> 32 == -1);

    $debug_break();
}
