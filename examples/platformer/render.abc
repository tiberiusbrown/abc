constexpr sprites TILES = sprites{ 16x16 "assets/tiles.png" };
constexpr sprites OBJECTS = sprites{ 16x16 "assets/objects.png" };
constexpr sprites PLAYER = sprites{ 16x16 "assets/player.png" };
constexpr sprites IMG_KEY = sprites{ 10x6 "assets/key.png" };
constexpr sprites IMG_HEART = sprites{ 10x8 "assets/heart.png" };
constexpr sprites TITLE = sprites{ "assets/title.png" };

constexpr font MAIN_FONT = FONT_VOLTER;
constexpr font SCORE_FONT = font{ 9 "assets/score.ttf" };

void render()
{
    switch(state)
    {
    case(STATE_LEVEL)                    render_level();
    case(STATE_LEVEL_COMPLETE)           render_level_complete();
    case(STATE_PAUSE)                    render_pause(false);
    case(STATE_CONFIRM)                  render_pause(true);
    case(STATE_INTRO, STATE_SCORE_TALLY) render_intro();
    case(STATE_MENU)                     render_menu();
    case(STATE_VICTORY)                  render_victory();
    case(STATE_LEVEL_SELECT)             render_level_select();
    case(STATE_GAME_OVER)                render_game_over();
    case(STATE_CREDITS)                  render_credits();
    }
}

void render_credits()
{
    i16 y = 61 - creditsy;

    $set_text_font(FONT_BR5D);
    $draw_text(41, y + 18, "Programming");
    $draw_text(37, y + 45, "Tiles and Sprites");
    $draw_text(54, y + 72, "Levels");

    $set_text_font(MAIN_FONT);
    $draw_text(32, y + 28, "Peter Brown");
    $draw_text(41, y + 55, "Kenney.nl");
    $draw_text(34, y + 82, "Luke Brown");
    $draw_text(32, y + 93, "Peter Brown");

    $draw_filled_rect(0, 0, 128, 17, BLACK);
    $draw_sprite(13, 2, TITLE, 0);
    $draw_filled_rect(0, 14, 128, 2, WHITE);
}

void render_pause(bool confirm)
{
    render_level();
    $draw_sprite(0, 0, sprites{ "assets/pause.png" }, 0);
    constexpr u8 x = 75;
    constexpr u8 y = 24;
    constexpr u8 h = 12;
    $set_text_font(MAIN_FONT);
    if(confirm)
    {
        $draw_text(68, 8, "Delete Save");
        $draw_text(x, y + h * 0, "No");
        $draw_text(x, y + h * 1, "Yes");
    }
    else
    {
        $draw_text(80, 8, "Paused");
        $draw_text(x, y + h * 0, "Resume");
        if(sound_on)
            $draw_text(x, y + h * 1, "Sound: On");
        else
            $draw_text(x, y + h * 1, "Sound: Off");
        $draw_text(x, y + h * 2, "Main Menu");
        if(single_level)
            $draw_text(x, y + h * 3, "Restart");
        else
            $draw_text(x, y + h * 3, "End Game");
    }
    $draw_text(66, y + h * pause_menui, ">");
    $draw_filled_rect(66, 9, 62, 2, WHITE);
}

u8[40] prog GAME_OVER_TILES = {
    0, 0, 0, 0, 0, 0, 133, 0,
    0, 0, 0, 0, 0, 0, 133, 0,
    0, 0, 0, 0, 0, 93, 133, 0,
    0, 0, 0, 0, 0, 0, 149, 150,
    2, 2, 2, 2, 2, 2, 2, 2
};

void render_game_over()
{
    for(u8 i = 0; i < 5; ++i)
        for(u8 j = 0; j < 8; ++j)
        {
            u8 t = VICTORY_TILES[i * 8 + j] - 1;
            if(t < 240)
                $draw_sprite(j * 16, i * 16 - 8, TILES, t);
        }
    
    $set_text_font(MAIN_FONT);
    $draw_text(1, 8, "Game Over...");

    {
        u8 i = (frame_count >> 4) & 3;
        $draw_sprite(76, 8, OBJECTS, 8 + i * 16);
        $draw_sprite(27, 15, OBJECTS, 12 + i * 16);
        i = (i + 1) & 3;
        $draw_sprite(13, 40, OBJECTS, 10 + i * 16);
        i = (i + 1) & 3;
        $draw_sprite(38, 40, OBJECTS, 9 + i * 16);
        i = (i + 1) & 3;
        $draw_sprite(74, 40, OBJECTS, 9 + i * 16);
        $draw_sprite(58, 21, OBJECTS, 11 + i * 16);
        $draw_sprite(56, 39, OBJECTS, 64);
    }
}

u8[40] prog VICTORY_TILES = {
    0, 0, 0, 0, 0, 0, 133, 0,
    0, 0, 0, 0, 0, 0, 133, 0,
    0, 0, 0, 0, 0, 93, 133, 0,
    0, 0, 0, 0, 0, 148, 149, 150,
    2, 2, 2, 2, 2, 2, 2, 2
};

u8[8] prog VICTORY_FRAMES = {
    0, 0, 6, 5, 6, 0, 0, 0
};
i8[8] prog VICTORY_OFFY = {
    8, 8, 8, 8, 8, 8, 8, 8
};

void render_victory()
{
    for(u8 i = 0; i < 5; ++i)
        for(u8 j = 0; j < 8; ++j)
        {
            u8 t = VICTORY_TILES[i * 8 + j] - 1;
            if(t < 240)
                $draw_sprite(j * 16, i * 16 - 8, TILES, t);
        }
    
    $set_text_font(MAIN_FONT);
    $draw_text(1, 8, "Game Complete!");

    constexpr u8 x = 13;
    constexpr u8 y = 12;

    $set_text_font(SCORE_FONT);
    $draw_textf(x + 6, y + 10, "%06u", total_score);
    {
        char[10] buf;
        $format(buf, "%u.%02u", total_time / 50, (total_time % 50) * 2);
        u8 w = $text_width(buf);
        $draw_text(x + 27 - w / 2, y + 32, buf);
    }

    $set_text_font(FONT_BR5D);
    if(was_high_score)
        $draw_text(x, y + 17, "New High Score!");
    if(was_best_time)
        $draw_text(x + 1, y + 40, "New Best Time!");

    {
        u8 i = (frame_count >> 3) & 7;
        $draw_sprite(76, VICTORY_OFFY[i], PLAYER, VICTORY_FRAMES[i]);
    }
}

void render_level_select()
{
    $set_text_font(FONT_BR5D);

    $draw_text(10, 5, "Name");
    $draw_text(60, 5, "High Score");
    $draw_text(97, 5, "Best Time");

    for(u8 i = 0; i < LEVEL_SELECT_ROWS; ++i)
    {
        u8 j = i + levelseloff;
        if(j >= NUM_MAPS) break;
        u8 y = i * 7 + 14;

        if(i == levelseli)
        {
            i16 x = 0;
            u8 w = $text_width(maps[j].name);
            if(w > 48 && frame_count >= 50)
            {
                x = (frame_count - 50) >> 2;
                if(x > w - 48)
                    x = w - 48;
            }
            $draw_text(10 - x, y, maps[j].name);
            $draw_filled_rect(0, y - 5, 10, 6, BLACK);
            $draw_text(0, y, "->");
        }
        else
        {
            $draw_text(10, y, maps[j].name);
            $draw_textf(0, y, "%02u", j + 1);
        }
        $draw_filled_rect(57, y - 5, 71, 6, BLACK);

        if(map_high_scores[j] != 0)
            $draw_textf(67, y, "%05u", map_high_scores[j]);
        else
            $draw_text(75, y, "-");

        if(map_best_times[j] != 0)
        {
            u16 t = map_best_times[j];
            char[10] buf;
            $format(buf, "%u.%02u", t / 50, (t % 50) * 2);
            u8 w = $text_width(buf);
            $draw_text(124 - w, y, buf);
        }
        else
            $draw_text(110, y, "-");
    }

    {
        constexpr u8 y = LEVEL_SELECT_ROWS * 7 + 9;
        constexpr u8 y2 = y + 16;
        $draw_hline(0, 7, 128, WHITE);
        $draw_hline(0, y, 128, WHITE);
        $draw_hline(0, y2, 128, WHITE);
        $draw_vline(8, 0, y2, WHITE);
        $draw_vline(58, 0, y2, WHITE);
        $draw_vline(95, 0, y2, WHITE);
        $draw_text(10, y + 7, "Entire Game");
        $draw_text(10, y + 14, "Sum of Best");

        bool has_sum_score = true;
        bool has_sum_time = true;
        u24 sum_score = 0;
        u24 sum_time = 0;
        for(u8 i = 0; i < NUM_MAPS; ++i)
        {
            if(map_high_scores[i] != 0)
                sum_score += map_high_scores[i];
            else
                has_sum_score = false;
            if(map_best_times[i] != 0)
                sum_time += map_best_times[i];
            else
                has_sum_time = false;
        }

        if(high_score != 0)
            $draw_textf(65, y + 7, "%06u", high_score);
        else
            $draw_text(75, y + 7, "-");
        
        if(has_sum_score)
            $draw_textf(65, y + 14, "%06u", sum_score);
        else
            $draw_text(75, y + 14, "-");
        
        if(best_time != 0)
        {
            char[10] buf;
            $format(buf, "%u.%02u", best_time / 50, (best_time % 50) * 2);
            u8 w = $text_width(buf);
            $draw_text(124 - w, y + 7, buf);
        }
        else
            $draw_text(110, y + 7, "-");
        
        if(has_sum_time)
        {
            char[10] buf;
            $format(buf, "%u.%02u", sum_time / 50, (sum_time % 50) * 2);
            u8 w = $text_width(buf);
            $draw_text(124 - w, y + 14, buf);
        }
        else
            $draw_text(110, y + 14, "-");
    }
}

void render_menu()
{
    $draw_sprite_selfmask(13, 2, TITLE, 0);
    $draw_sprite(menu_spritex - 16, -2, OBJECTS, menu_sprite + (frame_count & 0x30));
    $draw_filled_rect(0, 14, 128, 2, WHITE);
    constexpr u8 x = 33;
    constexpr u8 y = 29;
    constexpr u8 h = 11;
    $set_text_font(MAIN_FONT);
    if(save_exists)
        $draw_text(x, y, "Resume Game");
    else 
        $draw_text(x, y, "New Game");
    $draw_text(x, y + h * 1, "Level Select");
    if(sound_on)
        $draw_text(x, y + h * 2, "Sound: On");
    else
        $draw_text(x, y + h * 2, "Sound: Off");
    $draw_text(x, y + h * 3, "Credits");
    $draw_sprite(x - 19, y - 13 + menui * h, PLAYER, 7 + ((frame_count >> 3) & 3));
}

void render_intro()
{
    $set_text_font(SCORE_FONT);
    $draw_textf(43, 27, "%06u", total_score);
    if(level_frames_remaining != 0)
    {
        $set_text_font(MAIN_FONT);
        $draw_text(25, 7, "Level Complete!");
        $set_text_font(FONT_BR5D);
        $draw_textf(41, 35, "%05u", score);
        char[10] buf;
        $format(buf, "%u.%02u",
            level_frames_remaining / 50,
            (level_frames_remaining % 50) * 2);
        u8 w = $text_width(buf);
        $draw_text(87 - w, 35, buf);
    }
    else
    {
        $set_text_font(MAIN_FONT);
        if(current_map >= NUM_MAPS)
            $draw_text(24, 7, "Congratulations!");
        else
            $draw_text(37, 7, "Get Ready!");

        if(total_score != 0)
        {
            $set_text_font(FONT_BR5D);
            constexpr u8 y = 16;
            $draw_text(94, y + 5, "Total Time");
            $draw_filled_rect(94, y + 6, 34, 1, WHITE);
            char[10] buf;
            $format(buf, "%u.%02u",
                total_time / 50,
                (total_time % 50) * 2);
            u8 w = $text_width(buf);
            $draw_text(111 - w / 2, y + 13, buf);
        }
    }
    if(state == STATE_INTRO && level_frames_remaining != 0)
    {
        constexpr u8 y = 40;
        $set_text_font(FONT_BR5D);
        if(was_best_time)
        {
            $draw_text(93, y - 3, "New Level");
            $draw_text(93, y + 4, "Best Time!");
            $draw_filled_rect(91, y + 6, 37, 1, WHITE);
            char[10] buf;
            u16 time_taken = TIME_LIMIT_FRAMES - level_frames_remaining;
            $format(buf, "%u.%02u",
                time_taken / 50,
                (time_taken % 50) * 2);
            u8 w = $text_width(buf);
            $draw_text(110 - w / 2, y + 13, buf);
        }
        if(was_high_score)
        {
            $draw_text(2, y - 3, "New Level");
            $draw_text(1, y + 4, "High Score!");
            $draw_filled_rect(0, y + 6, 37, 1, WHITE);
            char[10] buf;
            u16 map_score = score + level_frames_remaining;
            $format(buf, "%05u", map_score);
            u8 w = $text_width(buf);
            $draw_text(17 - w / 2, y + 13, buf);
        }
    }
    $draw_sprite(56, 37, PLAYER, 7 + ((frame_count >> 3) & 0x3));
    $set_text_font(FONT_BR5D);
    $draw_textf(72, 49, "x%u", lives);
    $set_text_font(MAIN_FONT);
    if((frame_count & 0x3f) < 0x30)
        $draw_text(44, 64, "Press A");
}

void render_level_complete()
{ 
    render_level();
}

void render_level()
{
    // setup
    int icamx = int($round(camx));
    int icamy = int($round(camy));

    // render map tiles
    {
        i8 cx = icamx / 16;
        i8 cy = icamy / 16;
        i8 xoff = -(icamx & 15);
        i8 yoff = -(icamy & 15);
        u8[] prog& m = maps[current_map].map;
        u8 w = map_width;

        // background pattern
        {
            sprites background = maps[current_map].background;
            constexpr u8 SHIFT = 2;
            i16 tx = -((icamx >> SHIFT) & 255);
            u16 h = map_height * 16 - (icamy + 64);
            i16 ty = ((h >> SHIFT) & 63);
            $draw_sprite(tx      , ty - 64, background, 0);
            $draw_sprite(tx + 128, ty - 64, background, 1);
            if(h >= 64 * (1 << SHIFT))
            {
                if(tx >= -128)
                    $draw_sprite(tx      , ty, background, 0);
                else
                    $draw_sprite(tx + 256, ty, background, 0);
                $draw_sprite(tx + 128, ty, background, 1);
            }
            else
            {
                if(tx >= -128)
                    $draw_sprite(tx      , ty, background, 2);
                else
                    $draw_sprite(tx + 256, ty, background, 2);
                $draw_sprite(tx + 128, ty, background, 3);
            }
        }

        for(u8 i = 0; i < 5; ++i)
        {
            u16 index = (i + cy) * w + cx;
            u8[9] row = m[index +: 9];
            for(u8 j = 0; j < 9; ++j)
            {
                u8 t = row[j] - 1;
                if(t < 240)
                {
                    if(t >= 176)
                        t += ((frame_count << 2) & 0x30);
                    $draw_sprite(i8(j * 16 + xoff), i8(i * 16 + yoff), TILES, t);
                }
            }
        }
    }

    // render objects
    {
        for(u8 i = 0; i < MAX_OBJECTS; ++i)
        {
            map_object_t& obj = objects[i];
            u8 t = obj.type;
            if(t == OBJ_NONE)
                continue;
            
            u8 index;
            if(t >= OBJ_MOB && obj.death_frames != 0)
            {
                if(obj.death_frames & 0x4)
                    continue;
                else
                    index = t + 64;
            }
            else
            {
                index = t;
                if(death_frames == 0)
                    index += ((frame_count + i * 173) & 0x30);
            }

            $draw_sprite(
                obj.x - icamx, obj.y - icamy, OBJECTS,
                index);
        }
    }

    // render player
    if(invincibility_frames == 0 || (frame_count & 0x04) == 0)
    {
        u8 index = 0;
        if(player_facing_right)
            index += 7;
        if(player_on_ground)
        {
            if(player_moving)
                index += ((frame_count >> 3) & 3);
        }
        else
        {
            index += 4;
        }
        if(death_frames != 0)
            index = 5;

        $draw_sprite(
            i16($round(px) - camx) - i16(PXOFF),
            i16($round(py)) - icamy - i16(PYOFF),
            PLAYER, index);
    }
   
    // render HUD elements
    for(u8 i = 0; i < MAX_HEARTS; ++i)
        $draw_sprite(119 - i * 9, 0, IMG_HEART, i < hearts);
    for(u8 i = 0; i < keys_required; ++i)
        $draw_sprite(119 - i * 9, 8, IMG_KEY, i >= keys);
    $draw_filled_rect(0, 0, 20, 6, BLACK);
    $draw_filled_rect(57, 0, 13, 6, BLACK);
    $set_text_font(FONT_BR5D);
    $draw_textf(0, 5, "%05u", score);
    $draw_textf(58, 5, "%03u", u16(level_frames_remaining + 49) / 50);

    // render level start animation
    if(level_start_frames != 0)
    {
        $set_text_font(MAIN_FONT);
        char[] prog& name = maps[current_map].name;
        u8 w = $text_width(name);
        constexpr u8 y = 24;
        constexpr u8 h = 13;
        i16 x = 64 - w / 2;
        i16 xo = 0;
        constexpr u8 TRANSITION_FRAMES = 12;
        constexpr u8 END_FRAME = LEVEL_START_FRAMES - TRANSITION_FRAMES;
        if(level_start_frames >= END_FRAME)
            xo += (level_start_frames - END_FRAME) * 10;
        if(level_start_frames <= TRANSITION_FRAMES)
            xo -= (TRANSITION_FRAMES - level_start_frames) * 10;
        $draw_filled_rect(xo, y - 1, 128, h, BLACK);
        $draw_text(x + xo, y + 8, name);
    }
}
