u8  prog x1 = 0x12;
u16 prog x2 = 0x1234;
u24 prog x3 = 0x123456;
u32 prog x4 = 0x12345678;

u8 [4] prog a1 = { 0x10, 0x20, 0x30, 0x40 };
u16[4] prog a2 = { 0x1000, 0x2000, 0x3000, 0x4000 };
u24[4] prog a3 = { 0x100000, 0x200000, 0x300000, 0x400000 };
u32[4] prog a4 = { 0x10000000, 0x20000000, 0x30000000, 0x40000000 };

u16 ua;
u16 ub;
u16 uc;
u16 ud;

u16 prog pua = 1;
u16 prog pub = 2;
u16 prog puc = 3;
u16 prog pud = 4;

u16&[4] prog grs = { ua, ub, uc, ud };
u16 prog&[4] prog prs = { pua, pub, puc, pud };

u8 [] prog& ra1 = a1;
u16[] prog& ra2 = a2;
u24[] prog& ra3 = a3;
u32[] prog& ra4 = a4;

u8 [] prog& prog pra1 = a1;
u16[] prog& prog pra2 = a2;
u24[] prog& prog pra3 = a3;
u32[] prog& prog pra4 = a4;

void main()
{
    $debug_break();
    
    $assert(x1 == 0x12);
    $assert(x2 == 0x1234);
    $assert(x3 == 0x123456);
    $assert(x4 == 0x12345678);
    
    for(u8 i = 0; i < 4; i = i + 1)
    {
        u8 j = i + 1;
        $assert(a1[i] == j * 0x10);
        $assert(a2[i] == j * 0x1000);
        $assert(a3[i] == j * 0x100000);
        $assert(a4[i] == j * 0x10000000);
    }
    
    $assert(ua == 0);
    $assert(ub == 0);
    $assert(uc == 0);
    $assert(ud == 0);
    
    grs[0] = 1;
    grs[1] = 2;
    grs[2] = 3;
    grs[3] = 4;
    
    $assert(ua == 1);
    //$assert(ub == 2);
    //$assert(uc == 3);
    //$assert(ud == 4);
    
    //$assert(prs[0] == 1);
    //$assert(prs[1] == 2);
    //$assert(prs[2] == 3);
    //$assert(prs[3] == 4);
    
    //$assert(len(ra1) == 4);
    //$assert(len(ra2) == 4);
    //$assert(len(ra3) == 4);
    //$assert(len(ra4) == 4);
    //
    //$assert(len(pra1) == 4);
    //$assert(len(pra2) == 4);
    //$assert(len(pra3) == 4);
    //$assert(len(pra4) == 4);
    
    $debug_break();
}
