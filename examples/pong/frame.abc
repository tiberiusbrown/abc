void bounce_ball_off_paddle()
{
    vx *= -1.05;
    vy *= 1.05;
    $tones_play(SFX_BOUNCE_PADDLE);
}

void bounce_ball_off_wall()
{
    vy = -vy;
    $tones_play(SFX_BOUNCE_WALL);
}

void update()
{
    $poll_buttons();

    if($pressed(UP_BUTTON))
        py0 -= PADDLE_SPEED;
    if($pressed(DOWN_BUTTON))
        py0 += PADDLE_SPEED;
        
    if(!ai_serving && vx > 0 && bx > 40)
    {
        int dy = by - py1 - (PADDLE_HEIGHT - BALL_SIZE) / 2;
        if(dy > vy)
            py1 += PADDLE_SPEED;
        if(dy < vy)
            py1 -= PADDLE_SPEED;
    }
    
    if(py0 < TOP_Y)
        py0 = TOP_Y;
    if(py0 > BOT_Y - PADDLE_HEIGHT)
        py0 = BOT_Y - PADDLE_HEIGHT;
    if(py1 < TOP_Y)
        py1 = TOP_Y;
    if(py1 > BOT_Y - PADDLE_HEIGHT)
        py1 = BOT_Y - PADDLE_HEIGHT;
 
    if(serving)
    {
        bx = PADDLE_WIDTH;
        by = py0 + (PADDLE_HEIGHT - BALL_SIZE) / 2;
        if($just_pressed(A_BUTTON))
        {
            serving = false;
            vx = BALL_SPEED;
            vy = -BALL_SPEED;
       }
    }
    else if(ai_serving)
    {
        bx = 128 - PADDLE_WIDTH - BALL_SIZE;
        by = py1 + (PADDLE_HEIGHT - BALL_SIZE) / 2;
        if(--ai_serving_wait <= 0)
        {
           ai_serving = false;
           vx = -BALL_SPEED;
           vy = -BALL_SPEED;
        }
    }
    else
    {
        bx += vx;
        by += vy;
        if(by < TOP_Y)
        {
            by = TOP_Y;
            bounce_ball_off_wall();
        }
        if(by > BOT_Y - BALL_SIZE)
        {
            by = BOT_Y - BALL_SIZE;
            bounce_ball_off_wall();
        }
        if(bx < PADDLE_WIDTH)
        {
            bx = PADDLE_WIDTH;
            if(by >= py0 && by <= py0 + PADDLE_HEIGHT - BALL_SIZE)
                bounce_ball_off_paddle();
            else
            {
                serving = true;
                ++s1;
                $tones_play(SFX_LOSS);
            }
        }
        if(bx > 128 - PADDLE_WIDTH - BALL_SIZE)
        {
            bx = 128 - PADDLE_WIDTH - BALL_SIZE;
            if(by >= py1 && by <= py1 + PADDLE_HEIGHT - BALL_SIZE)
                bounce_ball_off_paddle();
            else
            {
                ai_serving = true;
                ai_serving_wait = 20;
                ++s0;
                $tones_play(SFX_WIN);
            }
        }
    }
}

void render()
{
    // scores
    $draw_filled_rect(0, TOP_Y - 1, 128, 1, WHITE);
    $draw_textf(0, 5, f, "%d", s0);
    {
        // right-align the AI's score
        char[8] buf;
        $format(buf, "%d", s1);
        $draw_text(129 - $text_width(f, buf), 5, f, buf);
    }
    
    $draw_text_P(52, 5, f, "PONG!");

    // paddles
    $draw_filled_rect(0, $round(py0), PADDLE_WIDTH, PADDLE_HEIGHT, WHITE);
    $draw_filled_rect(128 - PADDLE_WIDTH, $round(py1), PADDLE_WIDTH, PADDLE_HEIGHT, WHITE);
    
    // ball
    $draw_sprite($round(bx), $round(by), img_ball, 0);
        
    // bottom line
    $draw_filled_rect(0, BOT_Y, 128, 1, WHITE);
}

void new_game()
{
    constexpr int midy = (BOT_Y + TOP_Y - PADDLE_HEIGHT) / 2;
    py0 = midy;
    py1 = midy;

    serving = true;
    ai_serving = false;
}
