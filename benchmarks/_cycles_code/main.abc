import bench_math;

u8[100] prog pa = {};

constexpr tilemap TMAP = tilemap{ "world.tmx" };
constexpr sprites TILES = sprites{ 16x16 "tiles.png" };
constexpr sprites TILES8 = sprites{ 8x8 "tiles.png" };

void main()
{
    $debug_printf("nothing (baseline)\n");
    $debug_break();
    $debug_break();
    
    $debug_printf("$assert(1)\n");
    $debug_break();
    $assert(1);
    $debug_break();
    
    $debug_printf("$set_frame_rate(0)\n");
    $debug_break();
    $set_frame_rate(0);
    $debug_break();
    
    $debug_printf("$display()\n");
    $debug_break();
    $display();
    $debug_break();
    
    $debug_printf("$display_noclear()\n");
    $debug_break();
    $display_noclear();
    $debug_break();
    
    $debug_printf("$random()\n");
    $debug_break();
    $random();
    $debug_break();
    
    $debug_printf("$millis()\n");
    $debug_break();
    $millis();
    $debug_break();
    
    {
        char[32] b;
        
        $debug_printf("$format(b, \"%%d\", 0)\n");
        $debug_break();
        $format(b, "%d", 0);
        $debug_break();
        
        $debug_printf("$format(b, \"%%d\", 100)\n");
        $debug_break();
        $format(b, "%d", 100);
        $debug_break();
        
        $debug_printf("$format(b, \"%%d\", 10000)\n");
        $debug_break();
        $format(b, "%d", 10000);
        $debug_break();
        
        $debug_printf("$format(b, \"%%d\", 1000000)\n");
        $debug_break();
        $format(b, "%d", 1000000);
        $debug_break();
        
        $debug_printf("$format(b, \"%%d\", 100000000)\n");
        $debug_break();
        $format(b, "%d", 100000000);
        $debug_break();
        
        $debug_printf("$format(b, \"%%d\", -100)\n");
        $debug_break();
        $format(b, "%d", -100);
        $debug_break();
        
        $debug_printf("$format(b, \"%%d\", -10000)\n");
        $debug_break();
        $format(b, "%d", -10000);
        $debug_break();
        
        $debug_printf("$format(b, \"%%d\", -1000000)\n");
        $debug_break();
        $format(b, "%d", -1000000);
        $debug_break();
        
        $debug_printf("$format(b, \"%%d\", -100000000)\n");
        $debug_break();
        $format(b, "%d", -100000000);
        $debug_break();
        
        $debug_printf("$format(b, \"%%u\", 0)\n");
        $debug_break();
        $format(b, "%u", 0);
        $debug_break();
        
        $debug_printf("$format(b, \"%%u\", 100)\n");
        $debug_break();
        $format(b, "%u", 100);
        $debug_break();
        
        $debug_printf("$format(b, \"%%u\", 10000)\n");
        $debug_break();
        $format(b, "%u", 10000);
        $debug_break();
        
        $debug_printf("$format(b, \"%%u\", 1000000)\n");
        $debug_break();
        $format(b, "%u", 1000000);
        $debug_break();
        
        $debug_printf("$format(b, \"%%u\", 100000000)\n");
        $debug_break();
        $format(b, "%u", 100000000);
        $debug_break();
        
        constexpr u8 N = 10;
        constexpr float B = 1e-8;
        constexpr float F = 37.0;
        {
            float x = B;
            float y;
            for(u8 i = 0; i < N; ++i)
            {
                $debug_printf("$format(b, \"%%.1f\", %.8f)\n", x);
                $debug_break();
                $format(b, "%.1f", x);
                $debug_break();
                x *= F;
            }
        }
        {
            float x = B;
            float y;
            for(u8 i = 0; i < N; ++i)
            {
                $debug_printf("$format(b, \"%%.8f\", %.8f)\n", x);
                $debug_break();
                $format(b, "%.8f", x);
                $debug_break();
                x *= F;
            }
        }
        
    }
    
    $debug_printf("for(u8  i = 10; i != 0; --i) { $assert(1); }\n");
    $debug_break();
    for(u8  i = 10; i != 0; --i) { $assert(1); }
    $debug_break();
    
    $debug_printf("for(u16 i = 10; i != 0; --i) { $assert(1); }\n");
    $debug_break();
    for(u16 i = 10; i != 0; --i) { $assert(1); }
    $debug_break();
    
    $debug_printf("for(u24 i = 10; i != 0; --i) { $assert(1); }\n");
    $debug_break();
    for(u24 i = 10; i != 0; --i) { $assert(1); }
    $debug_break();
    
    $debug_printf("for(u32 i = 10; i != 0; --i) { $assert(1); }\n");
    $debug_break();
    for(u32 i = 10; i != 0; --i) { $assert(1); }
    $debug_break();
    
    $debug_printf("for(u8  i = 10; i != 0; i--) { $assert(1); }\n");
    $debug_break();
    for(u8  i = 10; i != 0; i--) { $assert(1); }
    $debug_break();
    
    $debug_printf("for(u16 i = 10; i != 0; i--) { $assert(1); }\n");
    $debug_break();
    for(u16 i = 10; i != 0; i--) { $assert(1); }
    $debug_break();
    
    $debug_printf("for(u24 i = 10; i != 0; i--) { $assert(1); }\n");
    $debug_break();
    for(u24 i = 10; i != 0; i--) { $assert(1); }
    $debug_break();
    
    $debug_printf("for(u32 i = 10; i != 0; i--) { $assert(1); }\n");
    $debug_break();
    for(u32 i = 10; i != 0; i--) { $assert(1); }
    $debug_break();
    
    $debug_printf("for(u8  i = 0; i < 10; ++i) { $assert(1); }\n");
    $debug_break();
    for(u8  i = 0; i < 10; ++i) { $assert(1); }
    $debug_break();
    
    $debug_printf("for(u16 i = 0; i < 10; ++i) { $assert(1); }\n");
    $debug_break();
    for(u16 i = 0; i < 10; ++i) { $assert(1); }
    $debug_break();
    
    $debug_printf("for(u24 i = 0; i < 10; ++i) { $assert(1); }\n");
    $debug_break();
    for(u24 i = 0; i < 10; ++i) { $assert(1); }
    $debug_break();
    
    $debug_printf("for(u32 i = 0; i < 10; ++i) { $assert(1); }\n");
    $debug_break();
    for(u32 i = 0; i < 10; ++i) { $assert(1); }
    $debug_break();
    
    $debug_printf("for(u8  i = 0; i < 10; i++) { $assert(1); }\n");
    $debug_break();
    for(u8  i = 0; i < 10; i++) { $assert(1); }
    $debug_break();
    
    $debug_printf("for(u16 i = 0; i < 10; i++) { $assert(1); }\n");
    $debug_break();
    for(u16 i = 0; i < 10; i++) { $assert(1); }
    $debug_break();
    
    $debug_printf("for(u24 i = 0; i < 10; i++) { $assert(1); }\n");
    $debug_break();
    for(u24 i = 0; i < 10; i++) { $assert(1); }
    $debug_break();
    
    $debug_printf("for(u32 i = 0; i < 10; i++) { $assert(1); }\n");
    $debug_break();
    for(u32 i = 0; i < 10; i++) { $assert(1); }
    $debug_break();
    
    {
    u32 a, b, q;
    a = 0x000000f9; b = 0x000000c8; $debug_printf("udiv4 : %u / %u\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0x000070d5; b = 0x00000ef5; $debug_printf("udiv4 : %u / %u\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0x0001eaf8; b = 0x00002e69; $debug_printf("udiv4 : %u / %u\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0xe935b872; b = 0xce97b5be; $debug_printf("udiv4 : %u / %u\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0x0000950e; b = 0x00000009; $debug_printf("udiv4 : %u / %u\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0x00abeb97; b = 0x0000b16f; $debug_printf("udiv4 : %u / %u\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0x00157cfb; b = 0x0000001a; $debug_printf("udiv4 : %u / %u\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0xc4381838; b = 0x005ac967; $debug_printf("udiv4 : %u / %u\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0x3c9f90cb; b = 0x00000477; $debug_printf("udiv4 : %u / %u\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0x07e36d62; b = 0x000000fd; $debug_printf("udiv4 : %u / %u\n", a, b); $debug_break(); q = a / b; $debug_break();
    }
    {
    i32 a, b, q;
    a = 0xffffff10; b = 0xffffffc1; $debug_printf("div4  : %d / %d\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0x0000efde; b = 0x00004b6e; $debug_printf("div4  : %d / %d\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0x00daac51; b = 0xff716309; $debug_printf("div4  : %d / %d\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0x975e9941; b = 0x4e00a4f1; $debug_printf("div4  : %d / %d\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0xffff7528; b = 0xffffff0e; $debug_printf("div4  : %d / %d\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0x00f26efe; b = 0xffffffd2; $debug_printf("div4  : %d / %d\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0xff421c9d; b = 0x000000dd; $debug_printf("div4  : %d / %d\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0x2cd51e66; b = 0xff2f1188; $debug_printf("div4  : %d / %d\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0x0e725d57; b = 0x000035af; $debug_printf("div4  : %d / %d\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0xdaf0f3e0; b = 0xffffffff; $debug_printf("div4  : %d / %d\n", a, b); $debug_break(); q = a / b; $debug_break();
    }
    {
    u16 a, b, q;
    a = 0x000000a9; b = 0x00000034; $debug_printf("udiv2 : %u / %u\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0x00007413; b = 0x00007033; $debug_printf("udiv2 : %u / %u\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0x000087ba; b = 0x000000ab; $debug_printf("udiv2 : %u / %u\n", a, b); $debug_break(); q = a / b; $debug_break();
    }
    {
    i16 a, b, q;
    a = 0xffffff13; b = 0x00000017; $debug_printf("div2  : %d / %d\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0xffffa424; b = 0xffffa59e; $debug_printf("div2  : %d / %d\n", a, b); $debug_break(); q = a / b; $debug_break();
    a = 0x00002ac1; b = 0xffffff93; $debug_printf("div2  : %d / %d\n", a, b); $debug_break(); q = a / b; $debug_break();
    }

    {
        u8[100] a, b;
        $debug_printf("memset(100)\n");
        $debug_break(); $memset(a, 1); $debug_break();
        $debug_printf("memcpy(100)\n");
        $debug_break(); $memcpy(b, a); $debug_break();
        $debug_printf("memcpy_P(100)\n");
        $debug_break(); $memcpy(b, pa); $debug_break();
    }
    
    bench_math();
    
    $debug_printf("draw_tilemap(0, 0) [16x16]\n");
    $debug_break(); $draw_tilemap(0, 0, TILES, TMAP); $debug_break();
    $debug_printf("draw_tilemap(-1, 0) [16x16]\n");
    $debug_break(); $draw_tilemap(-1, 0, TILES, TMAP); $debug_break();
    $debug_printf("draw_tilemap(0, -1) [16x16]\n");
    $debug_break(); $draw_tilemap(0, -1, TILES, TMAP); $debug_break();
    $debug_printf("draw_tilemap(-1, -1) [16x16]\n");
    $debug_break(); $draw_tilemap(-1, -1, TILES, TMAP); $debug_break();
    
    $debug_printf("draw_tilemap(0, 0) [8x8]\n");
    $debug_break(); $draw_tilemap(0, 0, TILES8, TMAP); $debug_break();
    $debug_printf("draw_tilemap(-1, 0) [8x8]\n");
    $debug_break(); $draw_tilemap(-1, 0, TILES8, TMAP); $debug_break();
    $debug_printf("draw_tilemap(0, -1) [8x8]\n");
    $debug_break(); $draw_tilemap(0, -1, TILES8, TMAP); $debug_break();
    $debug_printf("draw_tilemap(-1, -1) [8x8]\n");
    $debug_break(); $draw_tilemap(-1, -1, TILES8, TMAP); $debug_break();

    $assert(0);
}
